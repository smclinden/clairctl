# This file is a template, and might need editing before it works on your project.
image: golang:latest

variables:
  # Please edit to your GitLab project
  REPO_NAME: github.com/ids/clairctl

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.

stages:
  - build
  - publish
  - dockerize
    
compile:
  stage: build
  tags:
    - docker
  artifacts:
    untracked: true
    expire_in: 1 hour

  script:
    - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
    - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
    - cd $GOPATH/src/$REPO_NAME
    - curl https://glide.sh/get | sh
    - glide install -v
    - go get -u github.com/jteeuwen/go-bindata/...
    - go generate ./clair
    - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/clairctl

create_binaries:
  stage: publish
  tags:
    - docker
  artifacts:
    paths:
      - client-bins/clairctl-darwin-amd64   
      - client-bins/clairctl-linux-amd64   
    expire_in: 2 days
  script:
    - bash $CI_PROJECT_DIR/ci-deploy.sh
  only:
    - develop
    - master

#
# The DinD route works well enough, but there is no means
# to allow something like clairctl to host an http server
# for exchange with the Clair API, so moved to shell
#
#dockerize:
#  image: gitlab/dind
#  stage: deploy
#  tags:
#    - docker
#  script:
#    - bash $CI_PROJECT_DIR/ci-dockerize.sh
#  only:
#    - develop
#    - master
    
build_docker:
  stage: dockerize
  dependencies: 
    - compile
  tags:
    - shell
  script:
    - bash $CI_PROJECT_DIR/ci-shell-dockerize.sh 
  artifacts:
    paths:
      - ./reports
    expire_in: 1 week
  only:
    - develop
    - master

