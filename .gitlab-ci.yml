# This file is a template, and might need editing before it works on your project.
image: golang:latest

variables:
  # Please edit to your GitLab project
  REPO_NAME: github.com/ids/clairctl

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME
  - curl https://glide.sh/get | sh
  - glide install -v
  - go get -u github.com/jteeuwen/go-bindata/...
  - go generate ./clair

stages:
  - build
  - deploy
    
compile:
  stage: build
  script:
    - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/clairctl

  artifacts:
    paths:
      - clairctl

export:
  stage: deploy
  script:
    - go get github.com/mitchellh/gox
    - gox -os="linux" -os="darwin" -arch="amd64" -output="client-bins/{{.Dir}}-{{.OS}}-{{.Arch}}" -ldflags "-X github.com/ids/clairctl/cmd.version=$(cat VERSION)"
  artifacts:
    paths:
      - clairctl
  only:
    - master


dockerize:
  image: docker:latest
  services:
    - docker:dind
  stage: deploy
  script:
    - export VERSION=`cat $CI_PROJECT_DIR/VERSION`
    - docker login -u "$DOCKERHUB_USERAME" -p "DOCKERHUB_PASSWORD"
    - docker build -t idstudios/clairctl:$VERSION .
    - docker tag idstudios/clairctl:$VERSION idstudios/clairctl:latest
    - docker push idstudios/clairctl:$VERSION
    - docker push idstudios/clairctl:latest
  only:
    - master
    
